package com.github.igorrogov.pffscope.ndb;

public class PermuteDecryptor {

	private static final byte[] mpbbCrypt = {
			  65,		54,		19,		98,	(byte)	168,		33,		110,	(byte)	187,
			  (byte)	244,		22,	(byte)	204,		4,		127,		100,	(byte)	232,		93,
			  30,	(byte)	242,	(byte)	203,		42,		116,	(byte)	197,		94,		53,
			  (byte)	210,	(byte)	149,		71,	(byte)	158,	(byte)	150,		45,	(byte)	154,	(byte)	136,
			  76,		125,	(byte)	132,		63,	(byte)	219,	(byte)	172,		49,	(byte)	182,
			  72,		95,	(byte)	246,	(byte)	196,	(byte)	216,		57,	(byte)	139,	(byte)	231,
			  35,		59,		56,	(byte)	142,	(byte)	200,	(byte)	193,	(byte)	223,		37,
			  (byte)	177,		32,	(byte)	165,		70,		96,		78,	(byte)	156,	(byte)	251,
			  (byte)	170,	(byte)	211,		86,		81,		69,		124,		85,		0,
			  7,	(byte)	201,		43,	(byte)	157,	(byte)	133,	(byte)	155,		9,	(byte)	160,
			  (byte)	143,	(byte)	173,	(byte)	179,		15,		99,	(byte)	171,	(byte)	137,		75,
			  (byte)	215,	(byte)	167,		21,		90,		113,		102,		66,	(byte)	191,
			  38,		74,		107,	(byte)	152,	(byte)	250,	(byte)	234,		119,		83,
			  (byte)	178,		112,		5,		44,	(byte)	253,		89,		58,	(byte)	134,
			  126,	(byte)	206,		6,	(byte)	235,	(byte)	130,		120,		87,	(byte)	199,
			  (byte)	141,		67,	(byte)	175,	(byte)	180,		28,	(byte)	212,		91,	(byte)	205,
			  (byte)	226,	(byte)	233,		39,		79,	(byte)	195,		8,		114,	(byte)	128,
			  (byte)	207,	(byte)	176,	(byte)	239,	(byte)	245,		40,		109,	(byte)	190,		48,
			  77,		52,	(byte)	146,	(byte)	213,		14,		60,		34,		50,
			  (byte)	229,	(byte)	228,	(byte)	249,	(byte)	159,	(byte)	194,	(byte)	209,		10,	(byte)	129,
			  18,	(byte)	225,	(byte)	238,	(byte)	145,	(byte)	131,		118,	(byte)	227,	(byte)	151,
			  (byte)	230,		97,	(byte)	138,		23,		121,	(byte)	164,	(byte)	183,	(byte)	220,
			  (byte)	144,		122,		92,	(byte)	140,		2,	(byte)	166,	(byte)	202,		105,
			  (byte)	222,		80,		26,		17,	(byte)	147,	(byte)	185,		82,	(byte)	135,
			  88,	(byte)	252,	(byte)	237,		29,		55,		73,		27,		106,
			  (byte)	224,		41,		51,	(byte)	153,	(byte)	189,		108,	(byte)	217,	(byte)	148,
			  (byte)	243,		64,		84,		111,	(byte)	240,	(byte)	198,		115,	(byte)	184,
			  (byte)	214,		62,		101,		24,		68,		31,	(byte)	221,		103,
			  16,	(byte)	241,		12,		25,	(byte)	236,	(byte)	174,		3,	(byte)	161,
			  20,		123,	(byte)	169,		11,	(byte)	255,	(byte)	248,	(byte)	163,	(byte)	192,
			  (byte)	162,		1,	(byte)	247,		46,	(byte)	188,		36,		104,		117,
			  13,	(byte)	254,	(byte)	186,		47,	(byte)	181,	(byte)	208,	(byte)	218,		61,
			  20,		83,		15,		86,	(byte)	179,	(byte)	200,		122,	(byte)	156,
			  (byte)	235,		101,		72,		23,		22,		21,	(byte)	159,		2,
			  (byte)	204,		84,		124,	(byte)	131,		0,		13,		12,		11,
			  (byte)	162,		98,	(byte)	168,		118,	(byte)	219,	(byte)	217,	(byte)	237,	(byte)	199,
			  (byte)	197,	(byte)	164,	(byte)	220,	(byte)	172,	(byte)	133,		116,	(byte)	214,	(byte)	208,
			  (byte)	167,	(byte)	155,	(byte)	174,	(byte)	154,	(byte)	150,		113,		102,	(byte)	195,
			  99,	(byte)	153,	(byte)	184,	(byte)	221,		115,	(byte)	146,	(byte)	142,	(byte)	132,
			  125,	(byte)	165,		94,	(byte)	209,		93,	(byte)	147,	(byte)	177,		87,
			  81,		80,	(byte)	128,	(byte)	137,		82,	(byte)	148,		79,		78,
			  10,		107,	(byte)	188,	(byte)	141,		127,		110,		71,		70,
			  65,		64,		68,		1,		17,	(byte)	203,		3,		63,
			  (byte)	247,	(byte)	244,	(byte)	225,	(byte)	169,	(byte)	143,		60,		58,	(byte)	249,
			  (byte)	251,	(byte)	240,		25,		48,	(byte)	130,		9,		46,	(byte)	201,
			  (byte)	157,	(byte)	160,	(byte)	134,		73,	(byte)	238,		111,		77,		109,
			  (byte)	196,		45,	(byte)	129,		52,		37,	(byte)	135,		27,	(byte)	136,
			  (byte)	170,	(byte)	252,		6,	(byte)	161,		18,		56,	(byte)	253,		76,
			  66,		114,		100,		19,		55,		36,		106,		117,
			  119,		67,	(byte)	255,	(byte)	230,	(byte)	180,		75,		54,		92,
			  (byte)	228,	(byte)	216,		53,		61,		69,	(byte)	185,		44,	(byte)	236,
			  (byte)	183,		49,		43,		41,		7,		104,	(byte)	163,		14,
			  105,		123,		24,	(byte)	158,		33,		57,	(byte)	190,		40,
			  26,		91,		120,	(byte)	245,		35,	(byte)	202,		42,	(byte)	176,
			  (byte)	175,		62,	(byte)	254,		4,	(byte)	140,	(byte)	231,	(byte)	229,	(byte)	152,
			  50,	(byte)	149,	(byte)	211,	(byte)	246,		74,	(byte)	232,	(byte)	166,	(byte)	234,
			  (byte)	233,	(byte)	243,	(byte)	213,		47,		112,		32,	(byte)	242,		31,
			  5,		103,	(byte)	173,		85,		16,	(byte)	206,	(byte)	205,	(byte)	227,
			  39,		59,	(byte)	218,	(byte)	186,	(byte)	215,	(byte)	194,		38,	(byte)	212,
			  (byte)	145,		29,	(byte)	210,		28,		34,		51,	(byte)	248,	(byte)	250,
			  (byte)	241,		90,	(byte)	239,	(byte)	207,	(byte)	144,	(byte)	182,	(byte)	139,	(byte)	181,
			  (byte)	189,	(byte)	192,	(byte)	191,		8,	(byte)	151,		30,		108,	(byte)	226,
			  97,	(byte)	224,	(byte)	198,	(byte)	193,		89,	(byte)	171,	(byte)	187,		88,
			  (byte)	222,		95,	(byte)	223,		96,		121,		126,	(byte)	178,	(byte)	138,
			  71,	(byte)	241,	(byte)	180,	(byte)	230,		11,		106,		114,		72,
			  (byte)	133,		78,	(byte)	158,	(byte)	235,	(byte)	226,	(byte)	248,	(byte)	148,		83,
			  (byte)	224,	(byte)	187,	(byte)	160,		2,	(byte)	232,		90,		9,	(byte)	171,
			  (byte)	219,	(byte)	227,	(byte)	186,	(byte)	198,		124,	(byte)	195,		16,	(byte)	221,
			  57,		5,	(byte)	150,		48,	(byte)	245,		55,		96,	(byte)	130,
			  (byte)	140,	(byte)	201,		19,		74,		107,		29,	(byte)	243,	(byte)	251,
			  (byte)	143,		38,	(byte)	151,	(byte)	202,	(byte)	145,		23,		1,	(byte)	196,
			  50,		45,		110,		49,	(byte)	149,	(byte)	255,	(byte)	217,		35,
			  (byte)	209,		0,		94,		121,	(byte)	220,		68,		59,		26,
			  40,	(byte)	197,		97,		87,		32,	(byte)	144,		61,	(byte)	131,
			  (byte)	185,		67,	(byte)	190,		103,	(byte)	210,		70,		66,		118,
			  (byte)	192,		109,		91,		126,	(byte)	178,		15,		22,		41,
			  60,	(byte)	169,		3,		84,		13,	(byte)	218,		93,	(byte)	223,
			  (byte)	246,	(byte)	183,	(byte)	199,		98,	(byte)	205,	(byte)	141,		6,	(byte)	211,
			  105,		92,	(byte)	134,	(byte)	214,		20,	(byte)	247,	(byte)	165,		102,
			  117,	(byte)	172,	(byte)	177,	(byte)	233,		69,		33,		112,		12,
			  (byte)	135,	(byte)	159,		116,	(byte)	164,		34,		76,		111,	(byte)	191,
			  31,		86,	(byte)	170,		46,	(byte)	179,		120,		51,		80,
			  (byte)	176,	(byte)	163,	(byte)	146,	(byte)	188,	(byte)	207,		25,		28,	(byte)	167,
			  99,	(byte)	203,		30,		77,		62,		75,		27,	(byte)	155,
			  79,	(byte)	231,	(byte)	240,	(byte)	238,	(byte)	173,		58,	(byte)	181,		89,
			  4,	(byte)	234,		64,		85,		37,		81,	(byte)	229,		122,
			  (byte)	137,		56,		104,		82,		123,	(byte)	252,		39,	(byte)	174,
			  (byte)	215,	(byte)	189,	(byte)	250,		7,	(byte)	244,	(byte)	204,	(byte)	142,		95,
			  (byte)	239,		53,	(byte)	156,	(byte)	132,		43,		21,	(byte)	213,		119,
			  52,		73,	(byte)	182,		18,		10,		127,		113,	(byte)	136,
			  (byte)	253,	(byte)	157,		24,		65,		125,	(byte)	147,	(byte)	216,		88,
			  44,	(byte)	206,	(byte)	254,		36,	(byte)	175,	(byte)	222,	(byte)	184,		54,
			  (byte)	200,	(byte)	161,	(byte)	128,	(byte)	166,	(byte)	153,	(byte)	152,	(byte)	168,		47,
			  14,	(byte)	129,	(byte)	101,		115,	(byte)	228,	(byte)	194,	(byte)	162,	(byte)	138,
			  (byte)	212,	(byte)	225,		17,	(byte)	208,		8,	(byte)	139,		42,	(byte)	242,
			  (byte)	237,	(byte)	154,		100,		63,	(byte)	193,		108,	(byte)	249,	(byte)	236
	};

	private static final int DECRYPT_OFFSET = 0x200;

	public static void decrypt(byte[] input) {
		for (int i = 0; i < input.length; ++i) {
			int b = (input[i] & 0xff);
			input[i] = mpbbCrypt[DECRYPT_OFFSET + b];
		}
	}

}
